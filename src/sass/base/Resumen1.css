/*SELECTORES*/

/*SIMPLES*/
* {
    background-color: lightcoral; /*universal*/
}
h1 {
    background-color: blueviolet; /*Por etiqueta*/
}
#article1 { 
    background-color: aqua; /*Por id (no son reutilizables, se deben evitar)*/
}
.title {
    background-color: gold; /*Por clase*/
}
[href] {
    background-color: blue; /*Por atributo*/
}
[href="/zcss3-learning/examples-html5/index.html"] {
    background-color: wheat; /*Por atributo y valor*/
}
[target^=_b] {
    background-color: hotpink; /*Por atributo y primeras letras del valor del atributo*/
}
[href*=ciencias] {
    background-color: darkblue; /*Por atributo que contiene secuencia*/
}
[target$=mx] {
    background-color: cornflowerblue ; /*Por atributo y letras finales del atributo*/
}
[lang|=en] {
    background-color: hotpink; /*Por atributo que puede tener un valor con guión*/ 
}


/*COMPUESTOS*/
.title1,
.title2,
.title3,
.title4 {
    background-color: blueviolet; /*agrupado*/
}
article #article5 {
    background-color: deeppink; /*Descendiente-selecciona todos los decendientes (de todas las generaciones, y no es recomendable desender mas de un elemento)*/
}
#article > p {
    background-color: blue; /*hijo-selecciona los decendientes hijos directos*/
}
.title ~ nav{
    background-color: aqua; /*Todos los hermanos siguientes*/
}
#h2z + p {
    background-color: yellow; /*Hermano siguiente*/
}
.page2 ~ li [href*=ciencias] {
    background-color: rgb(0, 41, 128); /*Iteraciones de niveles (no es recomendable)*/
}
h1 {
    background-color: blueviolet !important;
}


/* El navegador tiene un margen de 8px por default, por eso conviene darle un margen 0 al body. Solamente a las etiquetas de bloque se les puede dar tamaño con whidth y hight, y mientras no se les da tamaño ocupan todo el whidth de su contenedor. */

/* LISTA DE SHORTHANDS (en general).

    margin: apx bpx cpx dpx; en el sentido de las manecillas del reloj
    border-radius: 50px 30px 10px 5px/25px 30px 25px 15px; 
    padding: apx bpx cpx dpx;
    border-radius: 5px/25px; (eje X/ eje Y).
    background: color url-image repeat attachment position; */
a {
    background-image: url(/html5-learning/assets/images/last-turn.jpg) 5px 5px; /* background-image: url() left top; */
    background-repeat: round; /* Valores; no-repeat, repeat, repeat-x, repeat-y, round, space, inherit, initial, unset. */ 
    background-attachment: fixed; /* Valores; fixed, local, scroll, inherit, initial, unset. */
    background-position: center; /* Valores; bottom, top, center, left, right, inherit, initial, unset. */
} 
/*  border: whidth style color; */
a {
    border-width: thick; /* Valores; medium, thick, thin, inherit, initial, unset. */
    border-top-style: solid;
    border-color: transparent;
}
/*  fond: style variant weight size/(line size) family; */
h1 {
    font: italic small-caps bold 12px/30px Georgia, serif; /* size y family son obligatorios. */
    font-style: oblique;
    font-variant: small-caps;
    font-weight: lighter;
    font-family: 'Princess Sofia', cursive;
    font-display: x;
    font-kerning: normal;
    font-stretch: condensed;
}


/* SELECTORES CON PSEUDOCLASE.

Son para elementos en un estado especial, y el código no es hightsensitive (no distingue entre mayúsculas o minúsculas). */

:root {
    background-color: aliceblue; /* Da estilo al elemento HTML. */
}
:not(h1.title) {
    background-color: violet; /* Da el estilo a todos los elementos que no son del tipo del selector dentro del paréntesis. */ 
}
div:empty {
    background-color: blue; /* Da estilo a todos los div sin contenido. */
}
div:hover p {
    display: block; /* Aquí al pasar el cursor sobre un div contenedor de un p, se modifica el display del p. */ 
}
:target
div:target {
    background-color: violet; /* Da estilo a los elementos (o al div) que tienen un id="algo" y fue designado por un link que conecta con el marcador (<a href="#algo"/>). */ 
}
p:only-child {
    background-color: pink; /* Da el estilo a los p que son hijo único dentro de su contenedor (incluyendo el contenedor body). */
}
p:first-child {
    background-color: pink; /* Da el estilo al primer p dentro de cada contenedor (incluyendo el contenedor body). La pseudoclase opuesta es p:last-child. */
}
p:first-child h2 {
    background-color: aliceblue; /* Da el estilo a todos los h2 descendientes del primer hijo p de los contenedores. */
}
p:nth-child(n+1) {
    background-color: salmon; /* Da el estilo a los p en posición n+1 (desde n=0) dentro de cada contenedor. */
}
p:nth-last-child(n+1) {
    background-color: salmon; /* Da el estilo a los p en posición n+1 (desde n=0) a partir del último, dentro de cada contenedor. */
}
p:only-of-type {
    background-color: aliceblue; /* Da el estilo a los p que sean el único hijo de su tipo dentro de sus contenedores. */
}
p:first-of-type {
    background-color: beige; /* Da el estilo al primer hijo dentro de un p. La pseudoclase opuesta es p:last-of-type. */
}
p:nth-of-type(3n+2) {
    background-color: beige; /* Da el estilo a los hijos en posición 3n+2 dentro de un p (el selector anterior es el caso particular con 1 dentro del paréntesis). La pseudoclase opuesta es   */
}
p:nth-last-of-type(3n+2) {
    background-color: beige; /* Da el estilo a los hijos en posición 3n+2 a partir del último hijo, dentro de un p. */
}
q:lang(en),
p:lang(no) {
    quotes: "~" "~";
    background-color: salmon; /* Da el estilo (poner los símbolos rodeando el contenido) a los elemetos que tienen el atributo lang="en", recordando los códigos de idioma (y de país) ISO 639-1. */
}
input:focus {
    background-color: lightcoral; /* Da un estilo a los imput cuando tienen el foco. */
}
input:in-range {
    background-color: lightcoral; /* Da un estilo a los imput que se llenaron con valores dentro de los parámetros dados por los atributos min, max (en inputs numericos) o minlenght, maxlenght. También el estilo se les da mientras tengan el foco y permanezcan sin llenar. La pseudoclase opuesta es input:out-of-range. */
}
input:valid {
    background-color: aliceblue; /* Da estilo a los input que se llenan con datos de acuerdo a su tipo. La pseudoclase opuesta es input:invalid. */
}
input:checked,
option:checked {
    background-color: lightcoral; /* Da un estilo a los imput que ya están llenados. */
}
input[type="text"]:disabled,
option:disabled {
    background-color: lightcoral; /* Da un estilo a los imput que están desavilitados. El pseudoelemento opuesto es input:enabled, para inputs habilitados. */
}
input:optional {
    background-color: violet; /* Da estilo a los input que no tengan el atributo required. */
}
input:read-only {
    background-color: aliceblue; /* Da estilo a los input con el atributo readonly. La pseudoclase opuesta es input:read-write. */
}


/* DESIGNADORES POR PSEUDOELEMENTO. */

p::first-line {
    background-color: aliceblue; /* Da estilo a la primera línea de un elemento de texto nivel bloque. */
}
p::first-letter {
    color: aliceblue;
    background-color: aliceblue; /* Da estilo a la primera letra de un elemento de texto nivel bloque. */
}
h1::before {
    content: url(/html5-learning/); /* Inserta contenido antes del contenido del elemento. */
}
h1::after {
    content: url(/html5-learning/); /* Inserta contenido después del contenido del elemento. */
}
::selection {
    background-color: aliceblue; /* Da estilo a los elementos seleccionados (subrayados con el mouse o con Ctrl+a). Admite las propiedades; color, background, cursor, outline. */
}
::-moz-selection {
    background-color: aliceblue;

}


/* INICIO CORRECTO DE UN CSS. */

*,
*::before,
*::after {
    box-sizing: border-box;  /* El valor por default es content-box. */
}
body {
    background: rgb(0, 0, 0) url(/html5-learning/assets/images/neon-light.jpg) repeat-x scroll top;
    margin: 0px;
    font-size: 100%; /* Esto permite que todos los browsers muestren el mismo tamaño de texto, y los usuarios puedan ampliarlo. */
    color: aqua;
    font-family: "Lucida Console", "Courier New", monospace;
}


/* PROPIEDADES BOX-MODEL (para elementos con display block). */

input {
    box-sizing: border-box; /* Especifica si las medidas que se le dan a la caja son a partir del borde o a partir del contenido. */ 
    margin: 150px; /* Los margenes verticales colapsan y se usa el de mayor tamaño, y para esto se puede usar margin-bottom. */
    border: 10px outset white;
    border-radius: 25px/20px;
    max-width: 20%; /* Valores; auto, fit-content, min-content, max-content, none. */
    min-width: fit-content; 
    width: 70%; /* Representa el 70% del viewport. Valores; auto, fit-content, min-content, max-content. */
    max-height: 20%;
    min-height: max-content;
    height: 2.5em;
    padding: 1.5em; /* Valores; inherit, initial, unset. */
    outline: 0.7em solid yellow; /* Dibuija una línea fuera del box-model */
    outline-offset: 15px; /* La distancia del box-model a la outline, y admite valores negativos. */
    box-shadow: 15px 25px 5px 15px green, inset -15px -10px white; /* box-shadow: offset-x, offset-y, blur-radius, spread-radius, color; La sombra por default está en en el plano Xx(-Y), y si se añade inset entonces está en el plano (-X)xY. */
}

/* CONTADORES. */

body {
    counter-reset: lista1; /* Abre un contador de lista general (es general porque abarca el elemento body). */
}
p {
    counter-reset: lista2; /* En cada elemento p se habre un nuevo contador (que sólo abarca hasta la aparición de otro p), y de ésta forma se anidan los contadores. */
}
p::before {
    counter-increment: lista2;
    content: "El número de párrafo es " counter(lista1)":"counter(lista2) " es;"; /* Agrega un número de contador antes del contenido en cada elemento p. */
}
li::before {
    counter-increment: lista1;
    content: counters(lista1,"z") " "; /* La función counters sirve para poner un subcontador por cada anidamiento de un elemento (en éste caso por cada anidamiento de li dentro de un li). */ 
}


/* TEXTOS. */

p {
    color: currentColor;
    letter-spacing: 25px; /* Admite valores negativos. Valores; inherit, initial, unset. */
    line-height: 100px;
    word-spacing: 5px;
    word-wrap: break-word; /* Valores; break-word, normal, inherit, initial, unset. */
    word-break: break-all; /* Valores; break-all, keep-all, normal, inherit, initial, unset. */ 
    white-space: nowrap; /* Valores; normal, nowrap, pre, pre-line, pre-wrap, inherit, initial, unset. */
    direction: ltr; /* Valores; ltr, rtl, inherit, initial, unset. */
    unicode-bidi: plaintext; /* Valores; bidi-override, embed, isolate, isolate-override, normal, plaintext, inherit, initial, unset. */
    text-align: center; /* Puede controlar el alineado del contenido de un elemento de bloque, siempre y cuando no tenga width declarado. Valores; center, end, justify, left, right, start, inherit, initial, unset. */
    text-indent: 150px;
    text-transform: capitalize;/* Valores; capitalize(en mayúscula la primera letra de cada palabra), lowercase, none, uppercase, inherit, initial, unset. */ 
    text-decoration: overline;/* Valores; dashed, dotted, double, line-through, none, overline, underline, solid, wavy, transparent. */ 
    text-shadow: 5px 10px 2px violet; /* text-shadow: offset-x offset-y blur-radious color; */
    font: italic small-caps bold 12px/30px "Lucida Console", "Courier New", monospace; /* font: style variant weight size/(line size) family; donde size y family son obligatorios. */
    font-style: normal; /* Valores; italic, normal, oblique, inherit, initial, unset. */
    font-variant: small-caps; /* Indica si las minusculas se convierten en mayusculas de tamaño mas pequeño a lo normal. Valores; normal, small-caps, inherit, initial, unset. */
    font-weight: lighter;/* Valores; bold, bolder, lighter, normal, inherit, initial, unset. */
    font-size: x-large;/* Valores; large, larger, medium, small, x-large, x-small, xx-large, xx-small, inherit, initial, unset. */
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif; /* La fuente o familia tipográfica. La lista de fuentes debe terminar con una font web safe, y se deben usar super familias de fuentes. */
}


/* TABLAS. */
table {
    border-spacing: 0.8em; /* Valores; inherit, initial, unset. */
    border-collapse: collapse; /* Valores; collapse, separate, inherit, initial, unset. */
    empty-cells:hide; /* Valores; hide,show, -moz-show-background, inherit, initial, unset. */ 
    table-layout: fixed; /* Muestra el desvordamiento de las celdas. Valores; auto, fixed, inherit, initial, unset. */
}
table th, table td {
    vertical-align: middle;/* Valores; auto, baseline bottom, middle, sup, super, text-bottom, text-top, top, -webkit-baseline-middle. */ 
}
caption {
    caption-side: top; /* Valores; top, bottom, inherit, initial, unset. */
}


/* ENLACES. */

a:link,
a:visited {
    display: inline-block; /* Para dar estilo como si fuera nivel block. */
    text-decoration: none;
}
a:hover,
a:active {
    cursor: nw-resize;/* La pseudoclase hover tiene que ir después de link y visited. Aquí por cascada el link hereda el display y la text-decoration, pero se cambian otras propiedades. Valores; alias, all-scroll, auto, cell, e-resize, ew-resize, n-resize, ne-resize, ns-resize, nw-resize, nesw-resize, col-resize, context-menu, copy, crosshair, dafault, grab, grabbing, help, move, no-drop, none, not-allowed, */
} /* FALTAN MAS VALORES PARA LA PROPIEDAD CURSOR. */


/* FORMULARIOS. */

input {
    background-image: url(/html5-learning/assets/images/Svg\ \(1\).svg); /* Se agrega un ícono dentro del input. Ésto se puede escribir de forma abreviada con el background shorthand. */
    background-position: 15px 15px;
    background-repeat: no-repeat;
    padding: 40px;
}
textarea {
    resize: none; /* Da estilo al capturador que aparece por defecto en la esquina inferior izquierda. Valores; both, horizontal, vertical, none. */
}




/* POSICIONAMIENTO Y FLOTADORES. */

/*Un elemento cuando tiene la propiedad position con un valor distinto de static, y en tal caso se habilitan las propiedades top, bottom, left, right, z-index. Cada elemento html tiene su espacio reservado segun el flujo de renderizado. El stackin context es el orden de apilamiento de las cajas que se superponen dentro del mismo contenedor, y por default tiene orden inverso al de aparición en el HTML. En en general el stackin context es z-index positivo, elementos posicionados sin z-index, elementos no posicionados, z-index negativo. */

.div1 {
    background: rgba(36, 131, 190,0.8);
    position: relative; /* Se posiciona usando como punto de refencia el espacio reservado normal (no lo pierde) que le da el flujo de renderizado. */ 
    left: 16em; /* Desde la izquierde se mueve 16em. Admite valores negativos. */
    top: 12em;
    z-index: 7; /* Modifica el orden del stackin context de los elementos dentro de un contenedor, asignandoles un número de posición (sólo afecta el stacking contex del elemento pero no de sus descendientes, pues tienen un contexto de apilamiento distinto). Para que un descendiente aparezca detrás de su ancestro, el descendiente debe tener z-index con valor negativo y su ansestro no debe tener z-index. */ 
}

div.div11,
div.div12 {
    border-radius: 0.5em;
    background: rgba(99, 30, 179, 0.8);
    width: 3em;
    height: 2.5em;
    text-align: center;
    position: absolute; /* En éste ejemplom ambos div tienen un ansestro posicionado. Los elementos pieden las medidas que ya tienen y su sepacio reservado, y se posicionan usando como punto de referencia el primer contenedor ansestro posicionado (o respecto al html). Se puede dar ésta propiedad a elementos de línea y ahorrarse la propiedad display: block; */ 
}

div.div11 {
    top: 1em; /* Aquí damos posicionamiento individula a cada div del elemplo anterior, y por cascada heredan la position: absolute; */
    left: 1em;
}

div.div12 {
    bottom: 2em;
    right: 1em;
}

nav {
    position: fixed; /* Piede las medidas que ya tiene y su sepacio reservado. Se posiciona usando como punto de referencia el html, y no cambia su posición al hacer scroll. Se puede dar ésta propiedad a elementos de línea y ahorrarse la propiedad display: block; */
    top: 5%;
    left: 5%;
    max-width: 40%;
    max-height: 30%;
}

form.form1 {
    position: sticky; /* Aquí top y bottom indican la distancia a la que el elemento debe estár de su contenedor para comportarse como fixed dentro de su contenedor. Es necesario que el contenedor tenga height declarado, o que tenga suficiente contenido como para hacer scroll, pero no es necesario que esté posicionado. Un descendiente con posición sticky se comporta como un desvordamiento, por lo tanto si el contenedor tiene overflow declarado entonces la posición no funciona. */   
    top: 0;
}

div,
image {
    float: left; /* Ajusta elementos hermanos de bloque uno al lado del otro dentro del contenedor, o imagenes al rededor de texto dentor de un contenedor (en tal caso debe ir acompañado de border-left o border-right para dar espacio al texto). A los elementos con ésta propiedad se les llama flotantes, y en el caso de tener mayor tamaño que su contenedor se desvorda. Valores; inline-end, inline-start, left, right, auto, none, inherit, initial, unset. */ 
}

.clearfix::after {
    content: ""; /* El clearfix hack; se le da la clase clearfix a un elemento contenedor de flotadores, y en vez de usar overflow éste código controla el posible desvordamiento. */
    clear: both; /* Si un elemento no es flotante, le quita la superposición de los elementos hermanos flotantes de acuerdo al valor dado. Valores; both, left, right, none. */
    display: table;
}


/* LISTAS. */

ul {
    list-style: cjk-ideographic outside url(/html5-learning/assets/images/250px-Srinivasa_Ramanujan_-_OPC_-_2.jpg); /* list-style: type position image; */
    list-style-type: hebrew; /* Se pued eusar el valor none para omitir los marcadores. */
    list-style-position: inside; /* Valores; inside, outside. */
    list-style-image: url(/html5-learning/assets/images/250px-Srinivasa_Ramanujan_-_OPC_-_2.jpg); /* Agrega una imagen como marcador en una lista. */
}

li {
    float: left; /* Ésto permite que los items de lista estén de forma horizontal. */
}
::marker {
    color: aliceblue; /* Da estilo a los elementos marcadores de una lista. */
}


/* MENÚS DESPLEGABLES. */

.dropdown {
    position: relative; /* Éste es el contenedor del contenedor de los elementos del menú. */
}
.dropdown-content {
    display: none;
    position: absolute; /* Éste es el contenedor de los elementos del menú. */
    z-index: 1;
}
.dropdown:hover .dropdown-content {
    display: block;
}


/* CONSULTA DE MEDIOS.@import url('https://fonts.googleapis.com/css2?family=Zen+Loop&display=swap'); */

@media only screen and (max-width: 700px) {
    div {
    width: 20%;   /* Da el estilo sólo cuando la pantalla del dispositivo tiene un máximo de 700px. */
    }
}


/* OTRAS PROPIEDADES. */

p.sp1[onmouseover*=g()] {
    opacity: 0.7; /* A diferencia del canal alpha del rgba, ésta propiedad es hereditaria. Valores; inherit, initial, unset. */
    clear: both; /* Quita de encima los elementos flotantes que tenga en la posición del valor indicado. Valores; both, left, right, none, inherit, initial, unset. */
    overflow: scroll; /* Valores; hidden, scroll, auto. */
    overflow-x: auto;
    overflow-y: scroll;
    display: block; /* Valores tradicionales; block, inline, inline-block (evita el salto de línea obligatorio entre elementos de bloque). */
}


/*1*/
/* los margenes verticales colapsan (se usa el de mayor tamaño), por lo tanto es mejor ir arrastrando los demás elementos con margin-bottom. */
*{
    box-sizing: border-box;
}
body{
    background-image:url(/html5-learning/assets/images/ce8a5e16-54e2-4b4e-a794-22dfe7824f39.jpg);
    background-repeat: repeat-x;
    background-position: center;
    background-attachment: fixed;
    background-color: blueviolet;
    color: rgba(26, 41, 126, 0.7);
    margin: 0px;
}
/* En general la propiedad background es shorthand, y tiene los valores background: color image repeat attachment position. */
body{
    background: rgba(238, 130, 238,0.8) url(/html5-learning/assets/images/ce8a5e16-54e2-4b4e-a794-22dfe7824f39.jpg) repeat-x fixed right;
    color: rgba(26, 41, 126, 0.815);
    margin: 0px;
}
/* la propiedad display tiene los valores none, block, inline, inline-block. Con none el elemento sigue cargandose pero no se dibuja en el navegador. */
.titlex{
    display: none;
}
/* la propiedad opacity es hereditaria, por lo cual se recomienda usar rgba, pues el canal alpha no es hereditario. */
.link{
    display: block;
    background-image: url(/html5-learning/assets/images/250px-Srinivasa_Ramanujan_-_OPC_-_2.jpg);
    opacity: 0.7;
    color: aqua;
    max-width: 200px;
    width: 150px;
    height: 120px;
    margin: auto;
    border: 10px solid purple;
    border-radius: 20px/15px;
    padding: 15px 12px;
    overflow-y: scroll;
    outline: 5px solid yellow;
    outline-offset: 15px;
}
.text-1{
    text-align: center;
}
.text-2{
    text-align: right;
}
/* text-aling controla el alineado de el contenido de un elemento de bloque, siempre y cuando el contenido no tenga ancho declarado. Al usar el valor justify el navegador va a hacer que el texto se expanda aunque deje espacios poco estéticos. Además la propiedad box-shadow recorre una sombra en el plano Xx(-Y), pues el eje-y está invertido y admite los valores (en ese orden) offset-x, offset-y, blur-radius (difuminación), spread-radius (propagación extra del tamaño original), color (sino lo espacificamos heredará el color del contenido o elemento al que pertenece), inset (en tal caso (offset-x,offset-y) están en el plano (-X)xY. No hay límite respecto al número de sombras que podemos crear, pues basta con separar los valores con una coma. */
.box{
    background-color: violet;
    color: beige;
    font-size: 20px;
    text-align: center;
    max-width: 300px;
    width: 250px;
    height: 100px;
    margin: auto;
    outline: 5px auto aqua;
    outline-offset: 50px;
    border: 5px solid salmon;
    border-radius: 30px;
    padding: 40px 50px;
    box-shadow: 15px 25px 5px 15px green, inset -15px -10px white;
}
